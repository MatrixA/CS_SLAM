{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Build with Clang++",
            "type": "shell",
            "command": "/usr/bin/clang++",
            "args": [
                "${file}",
                "-std=c++17",
                "-o",
                "${workspaceFolder}/out/${fileBasenameNoExtension}.out",
                "-I",
                "${workspaceFolder}/include",
                "-I",
                "/usr/local/include",
                "-I",
                "/opt/Homebrew/Cellar/glew/2.2.0_1/include",
                "-I",
                "/opt/Homebrew/Cellar/glfw/3.3.4/include",
                "-I",
                "/opt/Homebrew/Cellar/eigen/3.3.9/include/eigen3",
                // "-lglew",
                "-framework",
                "OpenGL",
                "-I",
                "/opt/homebrew/opt/opencv/include/opencv4",
                "-L",
                "/opt/homebrew/opt/opencv/lib",
                "-l",
                "opencv_gapi",
                "-l",
                "opencv_stitching",
                "-l",
                "opencv_alphamat",
                "-l",
                "opencv_aruco",
                "-l",
                "opencv_barcode",
                "-l",
                "opencv_bgsegm",
                "-l",
                "opencv_bioinspired",
                "-l",
                "opencv_ccalib",
                "-l",
                "opencv_dnn_objdetect",
                "-l",
                "opencv_dnn_superres",
                "-l",
                "opencv_dpm",
                "-l",
                "opencv_face",
                "-l",
                "opencv_freetype",
                "-l",
                "opencv_fuzzy",
                "-l",
                "opencv_hfs",
                "-l",
                "opencv_img_hash",
                "-l",
                "opencv_intensity_transform",
                "-l",
                "opencv_line_descriptor",
                "-l",
                "opencv_mcc",
                "-l",
                "opencv_quality",
                "-l",
                "opencv_rapid",
                "-l",
                "opencv_reg",
                "-l",
                "opencv_rgbd",
                "-l",
                "opencv_saliency",
                "-l","opencv_sfm",
                "-l",
                "opencv_stereo",
                "-l",
                "opencv_structured_light",
                "-l",
                "opencv_phase_unwrapping",
                "-l",
                "opencv_superres",
                "-l",
                "opencv_optflow",
                "-l",
                "opencv_surface_matching",
                "-l",
                "opencv_tracking",
                "-l",
                "opencv_highgui",
                "-l",
                "opencv_datasets",
                "-l",
                "opencv_text",
                "-l",
                "opencv_plot",
                "-l",
                "opencv_videostab",
                "-l",
                "opencv_videoio",
                "-l",
                "opencv_viz",
                "-lopencv_wechat_qrcode",
                "-l",
                "opencv_xfeatures2d",
                "-l",
                "opencv_shape",
                "-l",
                "opencv_ml",
                "-l",
                "opencv_ximgproc",
                "-l",
                "opencv_video",
                "-l",
                "opencv_dnn",
                "-l",
                "opencv_xobjdetect",
                "-l",
                "opencv_objdetect",
                "-l",
                "opencv_calib3d",
                "-l",
                "opencv_imgcodecs",
                "-l",
                "opencv_features2d",
                "-l",
                "opencv_flann",
                "-l",
                "opencv_xphoto",
                "-l",
                "opencv_photo",
                "-l",
                "opencv_imgproc",
                "-l",
                "opencv_core"
            ],
            "group": "build"
        },
        {
            "type": "cppbuild",
            "label": "Build with g++",
            "command": "g++",
            "args": [
                "-g",
                "-std=c++11",
                "${file}",
                "-o",
                "${fileBasenameNoExtension}",
                "-I",
                "C:/opencv/build/x64/MingW/install/include",
                "-I",
                "C:/opencv/build/include/opencv",
                "-I",
                "C:/opencv/build/include/opencv2",
                "-I",
                "C:/eigen-3.4.0",
                "-I",
                "${workspaceFolder}/include",
                "-L",
                "C:/opencv/build/x64/MingW/lib",
                "-l",
                "opencv_core452",
                "-l",
                "opencv_highgui452",
                "-l",
                "opencv_imgcodecs452",
                "-l",
                "opencv_imgproc452"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build",
            "detail": "编译器: mingW"
        },
        { // 在根文件夹中执行创建文件夹build的命令
            // 除windows系统外执行的命令为`mkdir -p build`
            // windows系统是在powershell中执行命令`mkdir -Force build`
            "label": "build_dir",
            "command": "mkdir",
            "type": "shell",
            "args": [
                "-p",
                "build"
            ],
            "windows": {
                "options": {
                    "shell": {
                        "executable": "powershell.exe"
                    }
                },
                "args": [
                    "-Force",
                    "build"
                ],
            }
        },
        { // 在build文件夹中调用cmake进行项目配置
            // 除windows系统外执行的命令为`cmake -DCMAKE_BUILD_TYPE=<Debug|Release|RelWithDebInfo|MinSizeRel> ../`
            // windows系统是在visual stuido的环境中执行命令`cmake -DCMAKE_BUILD_TYPE=<Debug|Release|RelWithDebInfo|MinSizeRel>  ../ -G "CodeBlocks - NMake Makefiles"`
            "label": "cmake",
            "type": "shell",
            "command": "cmake",
            "args": [
                "-DCMAKE_BUILD_TYPE=${input:CMAKE_BUILD_TYPE}",
                "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON", // 生成compile_commands.json 供c/c++扩展提示使用
                "../"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build",
            },
            "windows": {
                "args": [
                    "-DCMAKE_BUILD_TYPE=${input:CMAKE_BUILD_TYPE}",
                    "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
                    "../",
                    "-G",
                    "\"CodeBlocks - NMake Makefiles\""
                ],
                "options": {
                    "shell": {
                        // "executable": "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat",
                        // 需要根据安装的vs版本调用vs工具命令提示符
                        "executable": "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat",
                        "args": [
                            "${input:PLATFORM}", //指定平台
                            "-vcvars_ver=${input:vcvars_ver}", //指定vc环境版本
                            "&&"
                        ]
                    }
                },
            },
            "dependsOn": [
                "build_dir" // 在task `build_dir` 后执行该task
            ]
        },
        { // 在build文件夹中调用cmake编译构建debug程序
            // 执行的命令为`cmake --build ./ --target all --`
            //  windows系统如上需要在visual stuido的环境中执行命令
            "label": "build",
            "group": "build",
            "type": "shell",
            "command": "cmake",
            "args": [
                "--build",
                "./",
                "--target",
                "all",
                "--"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build",
            },
            "problemMatcher": "$gcc",
            "windows": {
                "options": {
                    "shell": {
                        // "executable": "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat",
                        "executable": "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat",
                        "args": [
                            "${input:PLATFORM}",
                            "-vcvars_ver=${input:vcvars_ver}",
                            "&&"
                        ]
                    }
                },
                "problemMatcher": "$msCompile"
            },
            "dependsOn": [
                "cmake" // 在task `cmake` 后执行该task
            ]
        },
        {
            "label": "run",
            "type": "shell",
            "group":"build",
            "command": "./examples/cave/cave",
            "args": ["./data/","./data/SensorsConfiguration.yaml"],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "build" 
            ]
        },
        {
            "label": "pythonplot",
            "type": "shell",
            "group":"build",
            "command": "python",
            "args": [
                "plot.py",
                "--optimized_poses",
                "poses.txt",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "run" 
            ]
        },
    ],
    "inputs": [
        {
            "id": "CMAKE_BUILD_TYPE",
            "type": "pickString",
            "description": "What CMAKE_BUILD_TYPE do you want to create?",
            "options": [
                "Debug",
                "Release",
                "RelWithDebInfo",
                "MinSizeRel",
            ],
            "default": "Debug"
        },
        {
            "id": "PLATFORM",
            "type": "pickString",
            "description": "What PLATFORM do you want to create?",
            "options": [
                "x86",
                "amd64",
                "arm",
                "x86_arm",
                "x86_amd64",
                "amd64_x86",
                "amd64_arm",
            ],
            "default": "amd64"
        },
        {
            "id": "vcvars_ver",
            "type": "pickString",
            "description": "What vcvars_ver do you want to create?",
            "options": [
                "14.2", // 2019
                "14.1", // 2017
                "14.0", // 2015
            ],
            "default": "14.2"
        }
    ]
}
